SFAscal Grammar
Developed by Dr. Christopher Ivancic at SFASU

<program> ->program <identifier> ; <block> . 
 <block> -><variable declaration part> <procedure declaration part> <statement part> 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <variable declaration part> ->var <variable declaration> ; { <variable declaration> ; } 
 <variable declaration> -><identifier > { , <identifier> } : <type> 
 <type> -><simple type> | <array type> 
 <array type> ->array [ <index range> ] of <simple type> 
 <index range> -><integer constant> .. <integer constant>
 <simple type> ->Integer | Boolean 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <procedure declaration part> ->{ <procedure declaration> ; } 
 <procedure declaration> ->procedure <identifier> ; <block> 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <statement part> -><compound statement> 
 <compound statement> ->begin <statement> { <statement> } end 
 <statement> -><simple statement> ; | <structured statement> 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <simple statement> -><assignment statement> | <procedure statement> | <read statement> | <write statement> 
 <assignment statement> -><variable> := <expression> 
 <procedure statement> -><procedure identifier> 
 <procedure identifier> -><identifier> 
 <read statement> ->read ( <input variable> ) 
 <input variable> -><variable> 
 <write statement> ->write ( <output value>  ) 
 <output value> -><expression> 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <structured statement> -><compound statement> | <if statement> | <while statement> 
 <if statement> ->if <expression> then <statement> | if <expression> then <statement> else <statement> 
 <while statement> ->while <expression> do <statement> 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <expression> -><simple expression> | <simple expression> <relational operator> <simple expression> 
 <simple expression> -><term> { <adding operator> <term> } 
 <term> -><factor> { <multiplying operator> <factor> } 
 <factor> -><variable> | <constant> | ( <expression> ) | not <factor> 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <relational operator> -> = | <> | < | <= | >= | > 
 <adding operator> -> + | - | or 
 <multiplying operator> -> * | div | and 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 <variable> -> <entire variable> | <indexed variable> 
 <indexed variable> -> <array variable> [ <expression> ] 
 <array variable> -> <entire variable> 
 <entire variable> -> <variable identifier> 
 <variable identifier> -> <identifier> 
--------------------------------------------------------------

